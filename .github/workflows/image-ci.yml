name: Image Lambda CI

on:
  push:
    branches: ["main"]
    paths:
      - "src/**"
      - "requirements.txt"
      - "Dockerfile"
      - "infra/image/**"
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: sa-east-1
      REPO_NAME: artifact-fn

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Usa SUAS credenciais (sem role_arn)
      - name: Configure AWS (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Terraform primeiro: garante/cria o ECR e expõe a URI ---
      # .github/workflows/image-lambda-ci.yml  (trecho dos steps Terraform/ECR/Build/Deploy)

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init (image)
        working-directory: infra/image
        run: terraform init -upgrade

      # (opcional) limpa lock velho, evita "ficar esperando"
      - name: Clear stale Terraform lock (best-effort)
        working-directory: infra/image
        env:
          TF_LOCK_TABLE: terraform-locks
        run: |
          aws dynamodb delete-item \
            --table-name "$TF_LOCK_TABLE" \
            --key '{"LockID":{"S":"ddd-state-terraform/artifact-lib-image/terraform.tfstate"}}' \
            || true

      # === APPLY 1: CRIAR/ASSEGURAR ECR (sem vars) ===
      - name: Terraform Apply (create/ensure ECR)
        working-directory: infra/image
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          terraform apply \
            -auto-approve -input=false -lock-timeout=5m \
            -target=aws_ecr_repository.lambda

      - name: Get ECR URI from Terraform output
        id: ecr_uri
        working-directory: infra/image
        run: |
          echo "REPO_URI=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com"

      - name: Build & Push da imagem
        env:
          REPO_URI: ${{ env.REPO_URI }}
          GIT_SHA: ${{ github.sha }}
        run: |
          SHORT=${GIT_SHA::7}
          docker build -t "$REPO_URI:$SHORT" -f infra/image/Dockerfile infra/image
          docker push "$REPO_URI:$SHORT"
          echo "TAG=$SHORT" >> $GITHUB_ENV

      # === APPLY 2: DEPLOY DA LAMBDA (só image_tag) ===
      - name: Terraform Apply (deploy lambda image)
        working-directory: infra/image
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          terraform apply \
            -auto-approve -input=false -lock-timeout=5m \
            -var="image_tag=${TAG}"
