name: Image Lambda CI

on:
  push:
    branches: ["main"]
    paths:
      - "src/**"
      - "requirements.txt"
      - "Dockerfile"
      - "infra/image/**"
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: sa-east-1
      REPO_NAME: artifact-fn

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Usa SUAS credenciais (sem role_arn)
      - name: Configure AWS (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Terraform primeiro: garante/cria o ECR e expõe a URI ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init (image)
        working-directory: infra/image
        run: terraform init -upgrade

      # 1) Garante/cria o ECR. Passa placeholders para as vars
      #    e limita o apply ao ECR para NÃO tentar criar a Lambda agora.
      - name: Terraform Apply (create/ensure ECR)
        working-directory: infra/image
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          terraform apply -auto-approve -input=false -lock-timeout=5m \
            -target=aws_ecr_repository.lambda \
            -var='image_tag=__placeholder__' \
            -var='lambda_role_arn=__placeholder__'

      # 2) Lê a URI do ECR do output do Terraform
      - name: Get ECR URI from Terraform output
        id: tf
        working-directory: infra/image
        run: echo "uri=$(terraform output -raw ecr_uri)" >> $GITHUB_OUTPUT


      # 3) Login no ECR usando a URI obtida
      - name: Login no ECR
        env:
          ECR_URI: ${{ steps.tf.outputs.uri }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          REGISTRY="$(echo "$ECR_URI" | cut -d/ -f1)"
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$REGISTRY"

      # 4) Build & push
      - name: Build & Push da imagem
        env:
          REPO_URI: ${{ steps.tf.outputs.uri }}
          GIT_SHA: ${{ github.sha }}
        run: |
          SHORT=${GIT_SHA::7}
          # ATENÇÃO ao Dockerfile/contexto abaixo:
          # se seu Dockerfile está na raiz, deixe como está.
          # Se estiver em infra/image, troque para: -f infra/image/Dockerfile infra/image
          docker build -t "$REPO_URI:$SHORT" -f Dockerfile .
          docker push "$REPO_URI:$SHORT"
          echo "TAG=$SHORT" >> $GITHUB_ENV


      # 5) Agora sim, aplica a Lambda com a tag real e o role arn
      - name: Terraform Apply (deploy lambda image)
        working-directory: infra/image
        env:
          TF_IN_AUTOMATION: "true"
        run: |
          terraform apply -auto-approve -input=false -lock-timeout=5m \
            -var="image_tag=${{ env.TAG }}" \
            -var="lambda_role_arn=${{ secrets.LAMBDA_ROLE_ARN }}"
