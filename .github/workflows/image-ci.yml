name: Image Lambda CI

on:
  push:
    branches: ["main"]
    paths:
      - "src/**"
      - "Dockerfile"
      - "requirements.txt"
      - "infra/**"
  workflow_dispatch:
    inputs:
      version:
        description: "Tag da imagem (ex: 0.1.0)"
        required: true
        default: "0.1.0"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: sa-east-1
      ECR_REPO_NAME: artifact-lib
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ########################################################
      # # 2) Testes unit치rios
      # ########################################################
      # # 游녤 NOVA ETAPA: roda testes unit치rios antes de empacotar o c칩digo
      # - name: Set up Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: "3.12"
      # # 游녤 NOVA ETAPA: instala as depend칡ncias necess치rias para os testes
      # - name: Instala depend칡ncias para testes
      #   run: |
      #     pip install -r requirements.txt
      #     pip install pytest            # ferramenta de testes
      #     pip install pytest-cov        # cobertura de testes          
      
      # # 游녤 NOVA ETAPA: roda todos os testes unit치rios
      # - name: Executa testes unit치rios
      #   run: pytest tests --quiet
      # # 游녤 NOVA ETAPA: verifica a cobertura dos testes
      # - name: Verifica cobertura dos testes
      #   run: |
      #     pytest --cov=. --cov-report=xml  ./tests
      #     pytest --cov=. --cov-report=html ./tests
      #     pytest --cov=. --cov-report=term ./tests
          
      # # 游녤 NOVA ETAPA: exibe o relat칩rio de cobertur
      # - name: Exibe relat칩rio de cobertura
      #   run: |
      #     echo "Relat칩rio de cobertura gerado em: $(pwd)/htmlcov/index.html"
      #     echo "Abra o arquivo htmlcov/index.html para ver o relat칩rio completo."

      ########################################################

      - name: Set VERSION
        id: ver
        run: echo "VERSION=${{ github.event.inputs.version || '0.1.0' }}" >> $GITHUB_OUTPUT

      - name: Configure AWS (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin \
            $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build & Push
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names artifact-fn --query 'repositories[0].repositoryUri' --output text 2>/dev/null || true)
          if [ -z "$REPO_URI" ]; then
            aws ecr create-repository --repository-name artifact-fn >/dev/null
            REPO_URI=$(aws ecr describe-repositories --repository-names artifact-fn --query 'repositories[0].repositoryUri' --output text)
          fi
          TAG=${GITHUB_SHA::7}
          docker build -t "$REPO_URI:$TAG" .
          docker push "$REPO_URI:$TAG"
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Terraform Apply (imagem)
        working-directory: infra/image
        env:
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_lambda_role_arn: ${{ secrets.LAMBDA_ROLE_ARN }}
        run: terraform apply -auto-approve